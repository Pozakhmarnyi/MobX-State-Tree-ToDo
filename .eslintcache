[{"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\index.js":"1","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\App.js":"2","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\reportWebVitals.js":"3","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\utils.js":"4","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TodoStore.js":"5","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore.js":"6","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\GroupStore.js":"7","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\components\\Add_Item.js":"8"},{"size":214,"mtime":1606851844728,"results":"9","hashOfConfig":"10"},{"size":1518,"mtime":1607372650673,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":81,"mtime":1606142873484,"results":"13","hashOfConfig":"10"},{"size":3827,"mtime":1607177831832,"results":"14","hashOfConfig":"10"},{"size":1127,"mtime":1607176568228,"results":"15","hashOfConfig":"10"},{"size":1131,"mtime":1606942939725,"results":"16","hashOfConfig":"10"},{"size":104,"mtime":1607353865751,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"cpnq65",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\index.js",[],["38","39"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\App.js",[],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\reportWebVitals.js",[],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\utils.js",[],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TodoStore.js",["40"],"import { types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\n\r\nconst state = {\r\n\tlist: [\r\n\t\t{\r\n\t\t\tid: uID(),\r\n\t\t\ttitle: 'popato'\r\n\t\t}\r\n\t]\r\n}\r\n\r\n// class TodoModel {      // модель - (хоч говори форма) якою будемо наділяти наші нові об\"єкти\r\n// \tconstructor(id, title) {\r\n// \t\tthis.id = id;\r\n// \t\tthis.title = title;\r\n// \t}\r\n// }\r\n// const todo = new TodoModel(uID, \"Oil\")  --- І наш новий о\"єкт з заданою формою\r\n\r\n// Нижче те саме, але на 'mobx-state-tree'\r\n\r\nexport const TodoModel = t\r\n\t.model('TodoModel', {\t\t\t\t// надаю форму моделі\r\n\t\tid: t.identifier, // - індифікатор для наших посилань -> референсів\r\n\t\ttitle: t.string,\r\n\t\tisCompleted: t.optional(t.boolean, false),\t\t\t// опціонально, з дефолтним фолс\r\n\t\tisFavorite: t.optional(t.boolean, false),\r\n\t})\r\n\t.actions((self) => ({\r\n\t\ttoggleCompleted() {\r\n\t\t\tself.isCompleted = !self.isCompleted\r\n\t\t},\r\n\t\ttoggleFavorite() {\r\n\t\t\tself.isFavorite = !self.isFavorite\r\n\t\t}\r\n\r\n\t}));\r\n\r\n// const newTodo = TodoModel.create({ id: uID(), title: 'Fack' })\r\n\r\n// newTodo.isCompleted = true;      ТАК Є ПОМИЛКА, оскільки для внутрішньої зміни елементів у MST - треба робити через .actions і там створити якийсь метод - у нашому випадко toggleCompleted() {self.isCompleted = !self.isCompleted}\r\n// prettyPrint(newTodo);\r\n\r\n// newTodo.toggleCompleted()       // Ось так - Абсолютно законно ! %) \r\n// prettyPrint(newTodo);\r\n\r\n\r\nexport const TodoListModel = t\r\n\t.model('TodoListModel', { \t\t// наш MST - буде знати автоматично, що вміст нашого масиву матиме тип TodoModel ТАк -> list: t.array(TodoModel)\r\n\t\tlist: t.array(TodoModel), \t\t\t\t\t\t\t//якщо t.optional (\"першим аргументом - те,що повинно бути!\" , а другим це по дефолту, якщо нема першого)\r\n\t})\r\n\t.views((self) => ({\r\n\t\tget favoriteList() {\r\n\t\t\treturn self.list.filter(item => item.isFavorite)   // окремо відфільткував з усього і викликав як об\"єкт - так робити, як з олюбненим товаром, так і дaні юзерів\r\n\t\t},\r\n\t\tget length() {\r\n\t\t\treturn self.list.length\r\n\t\t}\r\n\t}))\r\n\t.actions((self) => ({  \t\t   \t// оскільки це MST - тут не можна вручну добивити, ще щось. І методи .push() і їм подібні, не поможуть, треба робити .action ІЗ своїми методами\r\n\t\tadd(title) {\t// get писати перед методом, коли нема потреби в пропсах - зараз у пропсі (title)\r\n\t\t\tconst todo = {\t\t    //const todo = TodoModel.create({...}) так не обо\"язково вказувати, оскільки MST знає, яку можедель ми використовуємо\r\n\t\t\t\tid: uID(),\r\n\t\t\t\ttitle,\r\n\t\t\t}\r\n\r\n\t\t\tself.list.unshift(todo)\r\n\t\t},\r\n\r\n\t\t// У .views перед методами варто ставити get - якщо їм не треба пропсів. get - кешується, і не буде щоразу запускатись, якщо наш стейт\\self не мінявся  \r\n\t}))\r\n\r\n// const todo = TodoModel.create({ \t\t\t\t\t\t// створення об\"яку\r\n// \tid: uID(),\r\n// \ttitle: 'egg',\r\n// })\r\n\r\n\r\n// const todoList = TodoListModel.create(state)\r\n\r\n// todoList.add('chocolate')\r\n// todoList.add('oil')\r\n\r\n// todoList.list[1].toggleCompleted();\r\n// todoList.list[0].toggleFavorite();\r\n\r\n\r\n\r\n// prettyPrint(todoList.favoriteList);\r\n\r\n\r\n// prettyPrint(todoList);\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore.js",[],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\GroupStore.js",[],["41","42"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\components\\Add_Item.js",[],["43","44"],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":4,"column":7,"nodeType":"51","messageId":"52","endLine":4,"endColumn":12},{"ruleId":"45","replacedBy":"53"},{"ruleId":"47","replacedBy":"54"},{"ruleId":"45","replacedBy":"55"},{"ruleId":"47","replacedBy":"56"},"no-native-reassign",["57"],"no-negated-in-lhs",["58"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar",["57"],["58"],["57"],["58"],"no-global-assign","no-unsafe-negation"]