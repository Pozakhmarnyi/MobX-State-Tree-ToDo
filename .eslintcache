[{"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\index.js":"1","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\App.js":"2","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\utils.js":"3","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TodoStore.js":"4","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore.js":"5","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\GroupStore.js":"6","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\components\\Add_Item.js":"7","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\FavoriteStore.js":"8","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TestStore.js":"9","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore2.js":"10"},{"size":214,"mtime":1606851844728,"results":"11","hashOfConfig":"12"},{"size":3314,"mtime":1608918064212,"results":"13","hashOfConfig":"12"},{"size":81,"mtime":1606142873484,"results":"14","hashOfConfig":"12"},{"size":4053,"mtime":1608914287340,"results":"15","hashOfConfig":"12"},{"size":2226,"mtime":1608917374906,"results":"16","hashOfConfig":"12"},{"size":2329,"mtime":1608844950095,"results":"17","hashOfConfig":"12"},{"size":104,"mtime":1607353865751,"results":"18","hashOfConfig":"12"},{"size":902,"mtime":1608917208815,"results":"19","hashOfConfig":"12"},{"size":269,"mtime":1608915575735,"results":"20","hashOfConfig":"12"},{"size":773,"mtime":1608918160417,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"cpnq65",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"29"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"29"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"29"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"29"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\index.js",[],["50","51"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\App.js",[],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\utils.js",[],["52","53"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TodoStore.js",["54"],"import { types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\n\r\nconst state = {\r\n\tlist: [\r\n\t\t{\r\n\t\t\tid: uID(),\r\n\t\t\ttitle: 'popato'\r\n\t\t}\r\n\t]\r\n}\r\n\r\n// class TodoModel {      // модель - (хоч говори форма) якою будемо наділяти наші нові об\"єкти\r\n// \tconstructor(id, title) {\r\n// \t\tthis.id = id;\r\n// \t\tthis.title = title;\r\n// \t}\r\n// }\r\n// const todo = new TodoModel(uID, \"Oil\")  --- І наш новий о\"єкт з заданою формою\r\n\r\n// Нижче те саме, але на 'mobx-state-tree'\r\n\r\nexport const TodoModel = t\r\n\t.model('TodoModel', {\t\t\t\t// надаю форму моделі\r\n\t\tid: t.identifier, // - індифікатор для наших посилань -> референсів\r\n\t\ttitle: t.string,\r\n\t\tisCompleted: t.optional(t.boolean, false),\t\t\t// опціонально, з дефолтним фолс\r\n\t\tisFavorite: t.optional(t.boolean, false),\r\n\t})\r\n\t.actions((self) => ({\r\n\t\ttoggleCompleted() {\r\n\t\t\tself.isCompleted = !self.isCompleted\r\n\t\t},\r\n\t\ttoggleFavorite() {\r\n\t\t\tself.isFavorite = !self.isFavorite\r\n\t\t}\r\n\r\n\t}));\r\n\r\n// const newTodo = TodoModel.create({ id: uID(), title: 'Fas' })\r\n\r\n// newTodo.isCompleted = true;      ТАК Є ПОМИЛКА, оскільки для внутрішньої зміни елементів у MST - треба робити через .actions і там створити якийсь метод - у нашому випадко toggleCompleted() {self.isCompleted = !self.isCompleted}\r\n// prettyPrint(newTodo);\r\n\r\n// newTodo.toggleCompleted()       // Ось так - Абсолютно законно ! %) \r\n// prettyPrint(newTodo);\r\n\r\n\r\nexport const TodoListModel = t\r\n\t.model('TodoListModel', { // наш MST - буде знати автоматично, що вміст нашого масиву матиме тип TodoModel ТАк -> list: t.array(TodoModel)\r\n\t\tid: uID(),\r\n\t\ttitle: t.optional(t.string, 'TodoList'),\r\n\t\tlist: t.array(TodoModel), \t\t\t\t\t\t\t//якщо t.optional (\"першим аргументом - те,що повинно бути!\" , а другим це по дефолту, якщо нема першого)\r\n\t\t// list: t.array(t.reference(TodoModel)),\r\n\t})\r\n\t.views((self) => ({\r\n\t\tget favoriteList() {\r\n\t\t\treturn self.list.filter(item => item.isFavorite)   // окремо відфільткував з усього і викликав як об\"єкт - так робити, як з олюбненим товаром, так і дaні юзерів\r\n\t\t},\r\n\t\tget ifComplete() {\r\n\t\t\tlet count = 0\r\n\t\t\tfor (let i = 0; i < self.list.length; i++) {\r\n\t\t\t\tif (self.list[i].isCompleted === true) { count++ }\r\n\t\t\t}\r\n\t\t\treturn count\r\n\t\t}\r\n\r\n\t}))\r\n\t.actions((self) => ({  \t\t   \t// оскільки це MST - тут не можна вручну добивити, ще щось. І методи .push() і їм подібні, не поможуть, треба робити .action ІЗ своїми методами\r\n\t\tadd(title) {\t// get писати перед методом, коли нема потреби в пропсах - зараз у пропсі (title)\r\n\t\t\tconst todo = {\t\t    //const todo = TodoModel.create({...}) так не обо\"язково вказувати, оскільки MST знає, яку можедель ми використовуємо\r\n\t\t\t\tid: uID(),\r\n\t\t\t\ttitle,\r\n\t\t\t}\r\n\r\n\t\t\tself.list.unshift(todo)\r\n\t\t},\r\n\r\n\t\t// У .views перед методами варто ставити get - якщо їм не треба пропсів. get - кешується, і не буде щоразу запускатись, якщо наш стейт\\self не мінявся  \r\n\t}))\r\n\r\n// const todo = TodoModel.create({ \t\t\t\t\t\t// створення об\"яку\r\n// \tid: uID(),\r\n// \ttitle: 'egg',\r\n// })\r\n\r\n\r\n// const todoList = TodoListModel.create(state)\r\n\r\n// todoList.add('chocolate')\r\n// todoList.add('oil')\r\n\r\n// todoList.list[1].toggleCompleted();\r\n// todoList.list[0].toggleFavorite();\r\n\r\n\r\n\r\n// prettyPrint(todoList.favoriteList);\r\n\r\n\r\n// prettyPrint(todoList);\r\n\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore.js",["55","56","57","58"],"import { types as t } from 'mobx-state-tree';\r\nimport { GroupListModel } from './GroupStore';\r\nimport { TodoListModel } from './TodoStore';\r\nimport { values } from 'mobx';\r\nimport { FavoriteModel } from './FavoriteStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { TestStore } from './TestStore';\r\n\r\nconst RootStore = t\r\n\t.model('RootStore', {\t\t\t\t\t// MST - має мати один корневий стор - із якою всі решта\t\t\r\n\t\ttodos: t.optional(TodoListModel, {}),\r\n\t\tgroups: t.optional(GroupListModel, {}),\r\n\t\t// favorite: t.optional(FavoriteModel, {}),\r\n\r\n\t})\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst rootStore = RootStore.create({})\r\nexport default rootStore;\r\n\r\n\r\n// rootStore.todos.list[0].isFavorite();\r\n// prettyPrint(rootStore)\r\n// autorun(() => prettyPrint(rootStore))\r\n\r\n// rootStore.todos.add(\"banana\");\r\n// rootStore.todos.add(\"lemon\");\r\n\r\n// const todo = rootStore.todos.list[0]\r\n\r\nrootStore.groups.add(\"shopping list\")\r\nrootStore.groups.add(\"My plan for week\")\r\n\r\n\r\nrootStore.groups.list[0].addTodo(\"Finished this ToDO\")\r\nrootStore.groups.list[0].addTodo(\"add simple UI\")\r\nrootStore.groups.list[1].addTodo(\"one ToDO in [1] - shoping list\")\r\n\r\n\r\n\r\nrootStore.groups.list[0].todos[0].toggleCompleted() // все ок !\r\nrootStore.groups.list[0].todos[0].toggleFavorite() // все ок !\r\nrootStore.groups.list[1].todos[0].toggleFavorite()\r\n\r\n\r\n// const group = rootStore.groups.list[0]\r\n\r\n// group.addTodo({ id: \"asd\", title: \"Write by hand\" }) // вручну добавив \\\\ БУде відображатись у ДЕРЕВІ // Але тепер не працюватиме, оскільки використовую референс\r\n// prettyPrint(group)  \r\n\r\n// group.addTodo(todo)\r\n\r\n// todo.toggleCompleted()\r\n\r\n// prettyPrint(rootStore)\r\n// prettyPrint(todo === group.todos[0])\r\n\r\n\r\nconst referenceTodo = rootStore.groups.list[1].todos[0];\r\nconsole.log('referenceTodo', referenceTodo)\r\n// rootStore.favorite.add(referenceTodo)\r\n\r\n\r\n//гімнячу з перебором\r\n\r\nlet onlyFavorites = [];\r\nfor (let i = 0; i < rootStore.groups.list.length; i++) {\r\n\r\n\tonlyFavorites.push(rootStore.groups.list[i].todos.filter(item => item.isFavorite))\r\n}\r\n\r\nconsole.log('onlyFavorites', onlyFavorites)","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\GroupStore.js",["59"],"import { types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\nimport rootStore from './RootStore';\r\nimport { TodoModel } from './TodoStore';\r\n\r\n\r\nconst GroupModel = t\r\n\t.model('GroupModel', {\t\t\t\t\t// надаю форму моделі\r\n\t\tid: t.string,\r\n\t\ttitle: t.string,\r\n\t\t// todos: t.array(t.reference(TodoModel)),\r\n\t\ttodos: t.array(TodoModel),\r\n\t})\r\n\t.views((self) => ({\r\n\t\tget favoriteList() {\r\n\t\t\treturn self.todos.filter(item => item.isFavorite)   // окремо відфільткував з усього і викликав як об\"єкт - так робити, як з олюбненим товаром, так і дaні юзерів\r\n\r\n\r\n\t\t\t// for (let i = 0; i < self.todos.length; i++) {\r\n\t\t\t// \tself.favorite = self.todos.filter(item => item.isFavorite)\r\n\t\t\t// }\r\n\t\t\t// return self.favorite\r\n\t\t},\r\n\r\n\t\tget ifComplete() {\r\n\t\t\tlet count = 0\r\n\t\t\tfor (let i = 0; i < self.todos.length; i++) {\r\n\t\t\t\tif (self.todos[i].isCompleted === true) { count++ }\r\n\t\t\t}\r\n\t\t\treturn count\r\n\t\t}\r\n\r\n\t}))\r\n\r\n\t.actions((self) => ({\r\n\t\taddTodo(title) {\r\n\t\t\tconst todo = {\r\n\t\t\t\tid: uID(),\r\n\t\t\t\ttitle,\r\n\t\t\t}\r\n\t\t\tself.todos.unshift(todo)\r\n\t\t},\r\n\t\ttoggleCompleted() {\r\n\t\t\tself.isCompleted = !self.isCompleted\r\n\t\t},\r\n\t\ttoggleFavorite() {\r\n\t\t\tself.isFavorite = !self.isFavorite\r\n\t\t}\r\n\r\n\t}));\r\n\r\n\r\n\r\nexport const GroupListModel = t\r\n\t.model('GroupListModel', {\r\n\t\tid: uID(),\r\n\t\ttitle: t.optional(t.string, 'GroupList'),\r\n\t\tlist: t.array(GroupModel), \t\t\t\t\t\t// олюблена моя частина - Вкладеність \r\n\r\n\t})\r\n\t.views((self) => ({\r\n\t\tget favoriteList() {\r\n\t\t\treturn self.list.filter(item => item.isFavorite)   // окремо відфільткував з усього і викликав як об\"єкт - так робити, як з олюбненим товаром, так і дaні юзерів\r\n\t\t},\r\n\t\tget ifComplete() {\r\n\t\t\tlet count = 0\r\n\t\t\tfor (let i = 0; i < self.list.length; i++) {\r\n\t\t\t\tif (self.list[i].isCompleted === true) { count++ }\r\n\t\t\t}\r\n\t\t\treturn count\r\n\t\t}\r\n\r\n\t}))\r\n\t.actions((self) => ({\r\n\t\tadd(title) {\r\n\t\t\tconst group = {\r\n\t\t\t\tid: uID(),\r\n\t\t\t\ttitle,\r\n\t\t\t}\r\n\t\t\tself.list.unshift(group)\r\n\t\t},\r\n\t}))\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// const group = GroupModel.create({\r\n// \tid: uID(),\r\n// \ttitle: 'My new list',\r\n// })\r\n\r\n// const groupList = GroupListModel.create({\r\n// \tlist: [group]\r\n// })\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\components\\Add_Item.js",[],["60","61"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\FavoriteStore.js",["62","63","64"],"import { types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\nimport rootStore from './RootStore';\r\nimport { TestStore } from './TestStore';\r\nimport { TodoModel } from './TodoStore';\r\n\r\n\r\nexport const FavoriteModel = t\r\n\t.model('FavoriteModel', {\r\n\t\tfolder: t.reference(TestStore),\r\n\t\ttitle: t.string\r\n\t})\r\n\t// .views((self) => ({\r\n\t// \tget favoriteList() {\r\n\r\n\t// \t\t// for (let i = 0; i < self.list.length; i++) {\r\n\r\n\t// \t\t// \tself.list = rootStore.groups.list[i].todos.filter(item => item.isFavorite)\r\n\t// \t\t// }\r\n\r\n\t// \t\t// return self.list\r\n\r\n\r\n\t// \t\t// return self.list = rootStore.groups.list[i].todos.filter(item => item.isFavorite)  \r\n\t// \t},\r\n\t// \t// get ifComplete() {\r\n\t// \t// \tlet count = 0\r\n\t// \t// \tfor (let i = 0; i < self.list.length; i++) {\r\n\t// \t// \t\tif (self.list[i].isCompleted === true) { count++ }\r\n\t// \t// \t}\r\n\t// \t// \treturn count\r\n\t// \t// }\r\n\r\n\t// }))\r\n\r\n\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TestStore.js",["65","66","67"],"import { types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\nimport rootStore from './RootStore';\r\nimport { TodoModel } from './TodoStore';\r\n\r\n\r\nexport const TestStore = t\r\n\t.model('TestStore', {\r\n\t\tid: t.identifier,\r\n\t\ttitle: t.string\r\n\t})\r\n\r\n\r\n\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore2.js",["68","69","70","71"],{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"72","replacedBy":"76"},{"ruleId":"74","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":4,"column":7,"nodeType":"80","messageId":"81","endLine":4,"endColumn":12},{"ruleId":"78","severity":1,"message":"82","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":16},{"ruleId":"78","severity":1,"message":"83","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":23},{"ruleId":"78","severity":1,"message":"84","line":6,"column":10,"nodeType":"80","messageId":"81","endLine":6,"endColumn":18},{"ruleId":"78","severity":1,"message":"85","line":7,"column":10,"nodeType":"80","messageId":"81","endLine":7,"endColumn":19},{"ruleId":"78","severity":1,"message":"86","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},{"ruleId":"72","replacedBy":"87"},{"ruleId":"74","replacedBy":"88"},{"ruleId":"78","severity":1,"message":"89","line":2,"column":16,"nodeType":"80","messageId":"81","endLine":2,"endColumn":19},{"ruleId":"78","severity":1,"message":"86","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},{"ruleId":"78","severity":1,"message":"90","line":5,"column":10,"nodeType":"80","messageId":"81","endLine":5,"endColumn":19},{"ruleId":"78","severity":1,"message":"89","line":2,"column":16,"nodeType":"80","messageId":"81","endLine":2,"endColumn":19},{"ruleId":"78","severity":1,"message":"86","line":3,"column":8,"nodeType":"80","messageId":"81","endLine":3,"endColumn":17},{"ruleId":"78","severity":1,"message":"90","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":19},{"ruleId":"78","severity":1,"message":"91","line":2,"column":10,"nodeType":"80","messageId":"81","endLine":2,"endColumn":24},{"ruleId":"78","severity":1,"message":"92","line":3,"column":10,"nodeType":"80","messageId":"81","endLine":3,"endColumn":23},{"ruleId":"78","severity":1,"message":"82","line":4,"column":10,"nodeType":"80","messageId":"81","endLine":4,"endColumn":16},{"ruleId":"78","severity":1,"message":"84","line":6,"column":10,"nodeType":"80","messageId":"81","endLine":6,"endColumn":18},"no-native-reassign",["93"],"no-negated-in-lhs",["94"],["93"],["94"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'values' is defined but never used.","'FavoriteModel' is defined but never used.","'observer' is defined but never used.","'TestStore' is defined but never used.","'rootStore' is defined but never used.",["93"],["94"],"'uID' is defined but never used.","'TodoModel' is defined but never used.","'GroupListModel' is defined but never used.","'TodoListModel' is defined but never used.","no-global-assign","no-unsafe-negation"]