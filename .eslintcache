[{"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\index.js":"1","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\App.js":"2","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\utils.js":"3","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TodoStore.js":"4","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore.js":"5","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\GroupStore.js":"6","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\components\\Add_Item.js":"7","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TestStore.js":"8","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore2.js":"9","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\FolderFavoriteStore.js":"10","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\FavoriteStore.js":"11","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\persist.js":"12"},{"size":214,"mtime":1606851844728,"results":"13","hashOfConfig":"14"},{"size":3863,"mtime":1611918106732,"results":"15","hashOfConfig":"14"},{"size":81,"mtime":1606142873484,"results":"16","hashOfConfig":"14"},{"size":4053,"mtime":1611852394295,"results":"17","hashOfConfig":"14"},{"size":3052,"mtime":1611917541083,"results":"18","hashOfConfig":"14"},{"size":1851,"mtime":1611918177557,"results":"19","hashOfConfig":"14"},{"size":104,"mtime":1607353865751,"results":"20","hashOfConfig":"14"},{"size":269,"mtime":1608915575735,"results":"21","hashOfConfig":"14"},{"size":791,"mtime":1608932332941,"results":"22","hashOfConfig":"14"},{"size":908,"mtime":1608932312338,"results":"23","hashOfConfig":"14"},{"size":878,"mtime":1611594058442,"results":"24","hashOfConfig":"14"},{"size":1183,"mtime":1611845196454,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"cpnq65",{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"33"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"33"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"33"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"33"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\index.js",[],["59","60"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\App.js",["61","62"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\utils.js",[],["63","64"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TodoStore.js",["65"],"import { types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\n\r\nconst state = {\r\n\tlist: [\r\n\t\t{\r\n\t\t\tid: uID(),\r\n\t\t\ttitle: 'popato'\r\n\t\t}\r\n\t]\r\n}\r\n\r\n// class TodoModel {      // модель - (хоч говори форма) якою будемо наділяти наші нові об\"єкти\r\n// \tconstructor(id, title) {\r\n// \t\tthis.id = id;\r\n// \t\tthis.title = title;\r\n// \t}\r\n// }\r\n// const todo = new TodoModel(uID, \"Oil\")  --- І наш новий о\"єкт з заданою формою\r\n\r\n// Нижче те саме, але на 'mobx-state-tree'\r\n\r\nexport const TodoModel = t\r\n\t.model('TodoModel', {\t\t\t\t// надаю форму моделі\r\n\t\tid: t.identifier, // - індифікатор для наших посилань -> референсів\r\n\t\ttitle: t.string,\r\n\t\tisCompleted: t.optional(t.boolean, false),\t\t\t// опціонально, з дефолтним фолс\r\n\t\tisFavorite: t.optional(t.boolean, false),\r\n\t})\r\n\t.actions((self) => ({\r\n\t\ttoggleCompleted() {\r\n\t\t\tself.isCompleted = !self.isCompleted\r\n\t\t},\r\n\t\ttoggleFavorite() {\r\n\t\t\tself.isFavorite = !self.isFavorite\r\n\t\t}\r\n\r\n\t}));\r\n\r\n// const newTodo = TodoModel.create({ id: uID(), title: 'Fas' })\r\n\r\n// newTodo.isCompleted = true;      ТАК Є ПОМИЛКА, оскільки для внутрішньої зміни елементів у MST - треба робити через .actions і там створити якийсь метод - у нашому випадко toggleCompleted() {self.isCompleted = !self.isCompleted}\r\n// prettyPrint(newTodo);\r\n\r\n// newTodo.toggleCompleted()       // Ось так - Абсолютно законно ! %) \r\n// prettyPrint(newTodo);\r\n\r\n\r\nexport const TodoListModel = t\r\n\t.model('TodoListModel', { // наш MST - буде знати автоматично, що вміст нашого масиву матиме тип TodoModel ТАк -> list: t.array(TodoModel)\r\n\t\tid: uID(),\r\n\t\ttitle: t.optional(t.string, 'TodoList'),\r\n\t\tlist: t.array(TodoModel), \t\t\t\t\t\t\t//якщо t.optional (\"першим аргументом - те,що повинно бути!\" , а другим це по дефолту, якщо нема першого)\r\n\t\t// list: t.array(t.reference(TodoModel)),\r\n\t})\r\n\t.views((self) => ({\r\n\t\tget favoriteList() {\r\n\t\t\treturn self.list.filter(item => item.isFavorite)   // окремо відфільткував з усього і викликав як об\"єкт - так робити, як з олюбненим товаром, так і дaні юзерів\r\n\t\t},\r\n\t\tget ifComplete() {\r\n\t\t\tlet count = 0\r\n\t\t\tfor (let i = 0; i < self.list.length; i++) {\r\n\t\t\t\tif (self.list[i].isCompleted === true) { count++ }\r\n\t\t\t}\r\n\t\t\treturn count\r\n\t\t}\r\n\r\n\t}))\r\n\t.actions((self) => ({  \t\t   \t// оскільки це MST - тут не можна вручну добивити, ще щось. І методи .push() і їм подібні, не поможуть, треба робити .action ІЗ своїми методами\r\n\t\tadd(title) {\t// get писати перед методом, коли нема потреби в пропсах - зараз у пропсі (title)\r\n\t\t\tconst todo = {\t\t    //const todo = TodoModel.create({...}) так не обо\"язково вказувати, оскільки MST знає, яку можедель ми використовуємо\r\n\t\t\t\tid: uID(),\r\n\t\t\t\ttitle,\r\n\t\t\t}\r\n\r\n\t\t\tself.list.unshift(todo)\r\n\t\t},\r\n\r\n\t\t// У .views перед методами варто ставити get - якщо їм не треба пропсів. get - кешується, і не буде щоразу запускатись, якщо наш стейт\\self не мінявся  \r\n\t}))\r\n\r\n// const todo = TodoModel.create({ \t\t\t\t\t\t// створення об\"яку\r\n// \tid: uID(),\r\n// \ttitle: 'egg',\r\n// })\r\n\r\n\r\n// const todoList = TodoListModel.create(state)\r\n\r\n// todoList.add('chocolate')\r\n// todoList.add('oil')\r\n\r\n// todoList.list[1].toggleCompleted();\r\n// todoList.list[0].toggleFavorite();\r\n\r\n\r\n\r\n// prettyPrint(todoList.favoriteList);\r\n\r\n\r\n// prettyPrint(todoList);\r\n\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore.js",["66","67","68","69","70","71"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\GroupStore.js",["72","73"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\components\\Add_Item.js",[],["74","75"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\TestStore.js",["76","77","78"],"import { types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\nimport rootStore from './RootStore';\r\nimport { TodoModel } from './TodoStore';\r\n\r\n\r\nexport const TestStore = t\r\n\t.model('TestStore', {\r\n\t\tid: t.identifier,\r\n\t\ttitle: t.string\r\n\t})\r\n\r\n\r\n\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\RootStore2.js",["79","80","81","82"],"import { types as t } from 'mobx-state-tree';\r\nimport { GroupListModel } from './GroupStore';\r\nimport { TodoListModel } from './TodoStore';\r\nimport { values } from 'mobx';\r\nimport { FolderFavoriteModel } from './FolderFavoriteStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { TestStore } from './TestStore';\r\n\r\nconst RootStore2 = t\r\n\t.model('RootStore', {\t\t\t\t\t// MST - має мати один корневий стор - із якою всі решта\t\t\r\n\r\n\t\tfavorite: t.array(FolderFavoriteModel),\r\n\t\tTestStore: t.array(TestStore)\r\n\t})\r\n\r\n\r\n\r\n\r\nconst data = {\r\n\tfavorite: [{ title: \"Мушу розібратись з \", folder: \"1\" }],\r\n\tTestStore: [{ id: \"1\", title: \"посиланнями\" }]\r\n}\r\n\r\nconst rootStore2 = RootStore2.create(data)\r\nexport default rootStore2;\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\FolderFavoriteStore.js",["83","84","85"],"import { types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\nimport rootStore from './RootStore';\r\nimport { TestStore } from './TestStore';\r\nimport { TodoModel } from './TodoStore';\r\n\r\n\r\nexport const FolderFavoriteModel = t\r\n\t.model('FavoriteModel', {\r\n\t\tfolder: t.reference(TestStore),\r\n\t\ttitle: t.string\r\n\t})\r\n\t// .views((self) => ({\r\n\t// \tget favoriteList() {\r\n\r\n\t// \t\t// for (let i = 0; i < self.list.length; i++) {\r\n\r\n\t// \t\t// \tself.list = rootStore.groups.list[i].todos.filter(item => item.isFavorite)\r\n\t// \t\t// }\r\n\r\n\t// \t\t// return self.list\r\n\r\n\r\n\t// \t\t// return self.list = rootStore.groups.list[i].todos.filter(item => item.isFavorite)  \r\n\t// \t},\r\n\t// \t// get ifComplete() {\r\n\t// \t// \tlet count = 0\r\n\t// \t// \tfor (let i = 0; i < self.list.length; i++) {\r\n\t// \t// \t\tif (self.list[i].isCompleted === true) { count++ }\r\n\t// \t// \t}\r\n\t// \t// \treturn count\r\n\t// \t// }\r\n\r\n\t// }))\r\n\r\n\r\n",["86","87"],"C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\FavoriteStore.js",["88","89","90","91"],"import { getParent, types as t } from 'mobx-state-tree';\r\nimport { v4 as uID } from 'uuid';\r\nimport rootStore from './RootStore';\r\nimport { TestStore } from './TestStore';\r\nimport { TodoModel } from './TodoStore';\r\n\r\n\r\nexport const FavoriteModel = t\r\n\t.model('FavoriteModel', {\r\n\t\ttitle: t.optional(t.string, 'Favorite'),\r\n\t\ttodos: t.array(t.reference(TodoModel)),\r\n\r\n\t})\r\n\t.views((self) => ({\r\n\t\tget favoriteList() {\r\n\r\n\t\t\t// getParent(self).groups.list[0].todos.forEach((item) => {\r\n\t\t\t// \tself.todos.unshift(item)\r\n\t\t\t// });\r\n\t\t\treturn self.todos.filter(item => item.isFavorite)   // окремо відфільткував з усього і викликав як об\"єкт - так робити, як з олюбненим товаром, так і дaні юзерів\r\n\t\t}\r\n\t}))\r\n\t.actions((self) => ({\r\n\t\taddTodo(todo) {\r\n\t\t\tself.todos.unshift(todo)\r\n\t\t},\r\n\r\n\t}));\r\n\r\n","C:\\Users\\Pinav\\Desktop\\Stady\\MobX\\mst-todo\\src\\store\\persist.js",[],{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":7,"column":8,"nodeType":"98","messageId":"99","endLine":7,"endColumn":18},{"ruleId":"96","severity":1,"message":"100","line":8,"column":10,"nodeType":"98","messageId":"99","endLine":8,"endColumn":21},{"ruleId":"92","replacedBy":"101"},{"ruleId":"94","replacedBy":"102"},{"ruleId":"96","severity":1,"message":"103","line":4,"column":7,"nodeType":"98","messageId":"99","endLine":4,"endColumn":12},{"ruleId":"96","severity":1,"message":"104","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":17},{"ruleId":"96","severity":1,"message":"105","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":19},{"ruleId":"96","severity":1,"message":"106","line":6,"column":10,"nodeType":"98","messageId":"99","endLine":6,"endColumn":16},{"ruleId":"96","severity":1,"message":"107","line":8,"column":10,"nodeType":"98","messageId":"99","endLine":8,"endColumn":18},{"ruleId":"96","severity":1,"message":"108","line":9,"column":10,"nodeType":"98","messageId":"99","endLine":9,"endColumn":19},{"ruleId":"96","severity":1,"message":"109","line":12,"column":8,"nodeType":"98","messageId":"99","endLine":12,"endColumn":21},{"ruleId":"96","severity":1,"message":"110","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":18},{"ruleId":"96","severity":1,"message":"111","line":4,"column":8,"nodeType":"98","messageId":"99","endLine":4,"endColumn":17},{"ruleId":"92","replacedBy":"112"},{"ruleId":"94","replacedBy":"113"},{"ruleId":"96","severity":1,"message":"114","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":19},{"ruleId":"96","severity":1,"message":"111","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":17},{"ruleId":"96","severity":1,"message":"115","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":19},{"ruleId":"96","severity":1,"message":"116","line":2,"column":10,"nodeType":"98","messageId":"99","endLine":2,"endColumn":24},{"ruleId":"96","severity":1,"message":"117","line":3,"column":10,"nodeType":"98","messageId":"99","endLine":3,"endColumn":23},{"ruleId":"96","severity":1,"message":"106","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":16},{"ruleId":"96","severity":1,"message":"107","line":6,"column":10,"nodeType":"98","messageId":"99","endLine":6,"endColumn":18},{"ruleId":"96","severity":1,"message":"114","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":19},{"ruleId":"96","severity":1,"message":"111","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":17},{"ruleId":"96","severity":1,"message":"115","line":5,"column":10,"nodeType":"98","messageId":"99","endLine":5,"endColumn":19},{"ruleId":"92","replacedBy":"118"},{"ruleId":"94","replacedBy":"119"},{"ruleId":"96","severity":1,"message":"120","line":1,"column":10,"nodeType":"98","messageId":"99","endLine":1,"endColumn":19},{"ruleId":"96","severity":1,"message":"114","line":2,"column":16,"nodeType":"98","messageId":"99","endLine":2,"endColumn":19},{"ruleId":"96","severity":1,"message":"111","line":3,"column":8,"nodeType":"98","messageId":"99","endLine":3,"endColumn":17},{"ruleId":"96","severity":1,"message":"108","line":4,"column":10,"nodeType":"98","messageId":"99","endLine":4,"endColumn":19},"no-native-reassign",["121"],"no-negated-in-lhs",["122"],"no-unused-vars","'rootStore2' is defined but never used.","Identifier","unusedVar","'prettyPrint' is defined but never used.",["121"],["122"],"'state' is assigned a value but never used.","'autorun' is defined but never used.","'localForage' is defined but never used.","'values' is defined but never used.","'observer' is defined but never used.","'TestStore' is defined but never used.","'createPersist' is defined but never used.","'computed' is defined but never used.","'rootStore' is defined but never used.",["121"],["122"],"'uID' is defined but never used.","'TodoModel' is defined but never used.","'GroupListModel' is defined but never used.","'TodoListModel' is defined but never used.",["121"],["122"],"'getParent' is defined but never used.","no-global-assign","no-unsafe-negation"]